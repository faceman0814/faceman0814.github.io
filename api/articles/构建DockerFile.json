{"title":"Docker构建、打包、部署一条龙的过程","uid":"32b006c2c9398b6cfeebb21599635996","slug":"构建DockerFile","date":"2024-11-29T10:07:43.764Z","updated":"2024-11-29T10:19:45.366Z","comments":true,"path":"api/articles/构建DockerFile.json","keywords":null,"cover":"https://github.com/faceman0814/picx-images-hosting/raw/master/Qexo/24/11/image_be798dfabff7c30454f5233b1dc68c5f.png","content":"<p>Web项目写好后，我习惯用Docker打包成镜像然后部署到服务器上使用，理由是方便，后面迭代的时候只需要更换镜像就能完成部署，甚至更方便点使用cicd完成自动化部署，那么学会写DockerFile文件就是必不可少的了，那废话少说，实践开始！</p>\n<h1 id=\"1、构建DockerFile\"><a href=\"#1、构建DockerFile\" class=\"headerlink\" title=\"1、构建DockerFile\"></a>1、构建DockerFile</h1><p>我的文件目录为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS D:\\Study\\Demos\\src&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">    Directory: D:\\Study\\Demos\\src</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d----          2024/11/29    14:40                FaceMan.EFTest</span><br><span class=\"line\">d----          2024/11/29    16:31                FaceMan.WebTest</span><br><span class=\"line\">-a---          2024/11/29    13:55         309048 config.json</span><br><span class=\"line\">-a---          2024/11/29    14:51           2642 Demo.sln</span><br><span class=\"line\">-a---          2024/11/29    16:31           1170 Dockerfile</span><br><span class=\"line\">-a---          2024/11/29    15:09            640 version.props</span><br></pre></td></tr></table></figure>\n\n<p>所以我的DockerFile是这样写的：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用官方的 ASP.NET Core Runtime 镜像</span></span><br><span class=\"line\">FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS base</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置工作目录</span></span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开放应用所需的端口</span></span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用官方的.NET SDK镜像作为构建环境</span></span><br><span class=\"line\">FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /src</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制项目文件到容器中</span></span><br><span class=\"line\">COPY [&quot;FaceMan.EFTest/FaceMan.EFTest.csproj&quot;, &quot;FaceMan.EFTest/&quot;]</span><br><span class=\"line\">COPY [&quot;FaceMan.WebTest/FaceMan.WebTest.csproj&quot;, &quot;FaceMan.WebTest/&quot;]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">还原和编译项目</span></span><br><span class=\"line\">RUN dotnet restore &quot;FaceMan.WebTest/FaceMan.WebTest.csproj&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">复制整个项目到容器中</span></span><br><span class=\"line\">COPY . .</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR &quot;/src/FaceMan.WebTest&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">RUN dotnet build &quot;FaceMan.WebTest.csproj&quot; -c Release -o /app/build</span><br><span class=\"line\"></span><br><span class=\"line\">FROM build AS publish</span><br><span class=\"line\"></span><br><span class=\"line\">RUN dotnet publish &quot;FaceMan.WebTest.csproj&quot; -c Release -o /app/publish /p:UseAppHost=false</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">从构建环境中复制编译好的文件</span></span><br><span class=\"line\">FROM base AS final</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY --from=publish /app/publish .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">定义时区参数</span></span><br><span class=\"line\">ENV TZ=Asia/Shanghai</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">设置时区</span></span><br><span class=\"line\">RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo &#x27;$TZ&#x27; &gt; /etc/timezone</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置容器启动时执行的命令</span></span><br><span class=\"line\">ENTRYPOINT [&quot;dotnet&quot;, &quot;FaceMan.WebTest.dll&quot;]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2、打包成镜像\"><a href=\"#2、打包成镜像\" class=\"headerlink\" title=\"2、打包成镜像\"></a>2、打包成镜像</h1><p>导航到Dockerfile所在路径执行命令：<code>docker build -t 镜像名称 .</code>例如：<code>docker build -t webtest .</code></p>\n<p>ps：一定要有这个‘.’</p>\n<h1 id=\"3、启动容器\"><a href=\"#3、启动容器\" class=\"headerlink\" title=\"3、启动容器\"></a>3、启动容器</h1><p>镜像打完之后就可以根据镜像启动容器了：<code>docker run 镜像</code></p>\n<p>.net不知道几代升级之后就必须要指定端口了，我的默认生成的是8080，所以我需要用-p来映射我实际的端口：<code>docker run -d -p 7121:8080 --name my-running-app webtest</code> 其中my-running-app是容器名字，webtest是镜像名字</p>\n<h1 id=\"4、使用DockerCompose启动\"><a href=\"#4、使用DockerCompose启动\" class=\"headerlink\" title=\"4、使用DockerCompose启动\"></a>4、使用DockerCompose启动</h1><p>创建文件docker-compose.yml的内容为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;3.8&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  demo-app:</span><br><span class=\"line\">    image: webtest</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;7121:8080&quot;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      #设置环境变量，设置为开发环境</span><br><span class=\"line\">      ASPNETCORE_ENVIRONMENT: Development</span><br></pre></td></tr></table></figure>\n\n<p>然后执行部署命令：<code>docker compose up -d</code></p>\n<p>撤销部署命令为：<code>docker compose down</code></p>\n<h1 id=\"5、推送镜像到镜像仓库\"><a href=\"#5、推送镜像到镜像仓库\" class=\"headerlink\" title=\"5、推送镜像到镜像仓库\"></a>5、推送镜像到镜像仓库</h1><p>刚刚我们制作的镜像为：webtest，如果我们需要推送到镜像仓库的话就需要改下名字，要在前面加上你docker仓库的用户名，比如我的叫：faceman0814&#x2F;webtest。这里我们用tag命令来重新创建一个faceman0814&#x2F;webtest镜像：<code>docker tag webtest faceman0814/demo</code></p>\n<p>然后推送：<code>docker push faceman0814/webtest</code></p>\n<p>拉取命令：<code>docker pull faceman0814/webtest</code></p>\n<p>指定版本的话在拉取命令加上<code>:版本</code>，默认是最后一个版本</p>\n<h1 id=\"完结\"><a href=\"#完结\" class=\"headerlink\" title=\"完结\"></a>完结</h1><p>自此简单基础的镜像构建，容器部署的过程就结束了，完结撒花！</p>\n","feature":true,"text":"Web项目写好后，我习惯用Docker打包成镜像然后部署到服务器上使用，理由是方便，后面迭代的时候只需要更换镜像就能完成部署，甚至更方便点使用cicd完成自动化...","permalink":"/post/构建DockerFile","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"DevOps","slug":"DevOps","count":11,"path":"api/categories/DevOps.json"}],"tags":[{"name":"Docker","slug":"Docker","count":6,"path":"api/tags/Docker.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%9E%84%E5%BB%BADockerFile\"><span class=\"toc-text\">1、构建DockerFile</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%89%93%E5%8C%85%E6%88%90%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">2、打包成镜像</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">3、启动容器</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4%E3%80%81%E4%BD%BF%E7%94%A8DockerCompose%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">4、使用DockerCompose启动</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5%E3%80%81%E6%8E%A8%E9%80%81%E9%95%9C%E5%83%8F%E5%88%B0%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">5、推送镜像到镜像仓库</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E7%BB%93\"><span class=\"toc-text\">完结</span></a></li></ol>","author":{"name":"FaceMan","slug":"blog-author","avatar":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241114/image.2vermeukr5.webp","link":"/","description":"从0开始，直到1。","socials":{"github":"https://github.com/faceman0814","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/manmanzainuli","juejin":"","customs":{"bokeyuan":{"icon":"/svg/bokeyuan.svg","link":"https://www.cnblogs.com/FaceMan"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"GitHubAction实现自动化部署","uid":"c63101490a44e6dea3cd9d49ca1e518b","slug":"GitHubAction实现自动化部署","date":"2024-12-02T09:48:38.957Z","updated":"2024-12-03T03:16:40.945Z","comments":true,"path":"api/articles/GitHubAction实现自动化部署.json","keywords":null,"cover":"https://github.com/faceman0814/picx-images-hosting/raw/master/Qexo/24/12/image_3e28891b15f3fa786083895f3951ec21.png","text":"由于我的服务器配置太低支持不了GitLab的CICD，所以我这里用GitHub Action来实现（感恩），上期我们说到docker官方镜像仓库即使你用代理也经...","permalink":"/post/GitHubAction实现自动化部署","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"DevOps","slug":"DevOps","count":11,"path":"api/categories/DevOps.json"}],"tags":[{"name":"CICD","slug":"CICD","count":1,"path":"api/tags/CICD.json"}],"author":{"name":"FaceMan","slug":"blog-author","avatar":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241114/image.2vermeukr5.webp","link":"/","description":"从0开始，直到1。","socials":{"github":"https://github.com/faceman0814","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/manmanzainuli","juejin":"","customs":{"bokeyuan":{"icon":"/svg/bokeyuan.svg","link":"https://www.cnblogs.com/FaceMan"}}}},"feature":true},"next_post":{"title":"acme证书指南","uid":"2fa7613b39e74fc504fcd245fd9c9634","slug":"acme证书指南","date":"2024-11-28T00:00:00.000Z","updated":"2024-12-24T01:56:35.264Z","comments":true,"path":"api/articles/acme证书指南.json","keywords":null,"cover":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241115/image.6m3x9kfoen.webp","text":"通常我们自己的网站比如博客、个人网站、小程序等都需要使用SSL证书来确保安全。但是申请证书并不是一件简单的事情，需要有一定的经验和知识。本文将介绍如何使用acm...","permalink":"/post/acme证书指南","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"DevOps","slug":"DevOps","count":11,"path":"api/categories/DevOps.json"}],"tags":[{"name":"SSL","slug":"SSL","count":1,"path":"api/tags/SSL.json"},{"name":"Liunx","slug":"Liunx","count":1,"path":"api/tags/Liunx.json"}],"author":{"name":"FaceMan","slug":"blog-author","avatar":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241114/image.2vermeukr5.webp","link":"/","description":"从0开始，直到1。","socials":{"github":"https://github.com/faceman0814","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/manmanzainuli","juejin":"","customs":{"bokeyuan":{"icon":"/svg/bokeyuan.svg","link":"https://www.cnblogs.com/FaceMan"}}}},"feature":true}}