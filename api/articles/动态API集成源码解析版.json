{"title":"动态API集成源码解析版","uid":"82af2d180e848d28b222db96dd62b1e7","slug":"动态API集成源码解析版","date":"2024-11-24T00:00:00.000Z","updated":"2024-12-24T01:56:35.266Z","comments":true,"path":"api/articles/动态API集成源码解析版.json","keywords":null,"cover":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241114/Swagger.9rjf6latxr.webp","content":"<p>在日常开发时，想要用到Swagger就必须得创建控制器创建接口文档，一般业务处理都不会在控制器中处理，我们一般会再创建另一个类来处理业务逻辑，每次创建都两个类就很繁琐，这篇文章就是为了解决这个繁琐，代码只讲了大概思路，具体的细节可以参考源码<a href=\"https://github.com/faceman0814/FaceMan.Common/blob/main/src/FaceMan.DynamicAPI\">!动态API仓库</a>。不关心源码的朋友可以直接集成我的Nuget包FaceMan.DynamicAPI，配置教程参考我的文章：动态API集成。</p>\n<h2 id=\"集成Swagger\"><a href=\"#集成Swagger\" class=\"headerlink\" title=\"集成Swagger\"></a>集成Swagger</h2><ol>\n<li>首先，在你的.NET Core项目中安装需要的包。你可以通过NuGet包管理器来安装它，也可以直接复制粘贴安装，以下是包名和版本。</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;PackageReference Include=<span class=\"string\">&quot;Swashbuckle.AspNetCore&quot;</span> Version=<span class=\"string\">&quot;6.4.0&quot;</span> /&gt;</span><br><span class=\"line\">&lt;PackageReference Include=<span class=\"string\">&quot;Swashbuckle.AspNetCore.Filters&quot;</span> Version=<span class=\"string\">&quot;8.0.2&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>.Net 6以后取消了StartUp，配置都在Program中，这里采用新写法。</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"><span class=\"comment\">// 配置文件读取</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> basePath = AppContext.BaseDirectory;</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"keyword\">new</span> ConfigurationBuilder()</span><br><span class=\"line\">                .SetBasePath(basePath)</span><br><span class=\"line\">                .AddJsonFile(<span class=\"string\">&quot;appsettings.json&quot;</span>, optional: <span class=\"literal\">true</span>, reloadOnChange: <span class=\"literal\">true</span>)</span><br><span class=\"line\">                .Build();</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">region</span> 添加Swagger文档服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddEndpointsApiExplorer();</span><br><span class=\"line\">builder.Services.AddSwaggerGen(options =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//添加响应头信息。它可以帮助开发者查看 API 响应中包含的 HTTP 头信息，从而更好地理解 API 的行为。</span></span><br><span class=\"line\">    options.OperationFilter&lt;AddResponseHeadersFilter&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//摘要中添加授权信息。它会在每个需要授权的操作旁边显示一个锁图标，提醒开发者该操作需要身份验证。</span></span><br><span class=\"line\">    options.OperationFilter&lt;AppendAuthorizeToSummaryOperationFilter&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//加安全需求信息。它会根据 API 的安全配置（如 OAuth2、JWT 等）自动生成相应的安全需求描述，帮助开发者了解哪些操作需要特定的安全配置。</span></span><br><span class=\"line\">    options.OperationFilter&lt;SecurityRequirementsOperationFilter&gt;();</span><br><span class=\"line\">    options.SwaggerDoc(<span class=\"string\">&quot;v1&quot;</span>, <span class=\"keyword\">new</span> OpenApiInfo</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Title = <span class=\"string\">&quot;xxxFrameWork API&quot;</span>,</span><br><span class=\"line\">        Version = <span class=\"string\">&quot;v1&quot;</span>,</span><br><span class=\"line\">        Description = <span class=\"string\">&quot;xxxFrameWork API 接口文档&quot;</span>,</span><br><span class=\"line\">        Contact = <span class=\"keyword\">new</span> OpenApiContact()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Name = <span class=\"string\">&quot;xxxxx&quot;</span>,</span><br><span class=\"line\">            Email = <span class=\"string\">&quot;xxxxx@qq.com&quot;</span>,</span><br><span class=\"line\">            Url = <span class=\"keyword\">new</span> Uri(<span class=\"string\">&quot;https://github.com/xxxxx&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endregion</span> 添加Swagger文档服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开发环境才开启文档。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (app.Environment.IsDevelopment())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    app.UseSwagger();</span><br><span class=\"line\">    app.UseSwaggerUI(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//配置Endpoint路径和文档标题</span></span><br><span class=\"line\">        options.SwaggerEndpoint(<span class=\"string\">&quot;/swagger/v1/swagger.json&quot;</span>, <span class=\"string\">&quot;v1 Docs&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//配置路由前缀，RoutePrefix是Swagger UI的根路径。</span></span><br><span class=\"line\">        <span class=\"comment\">//options.RoutePrefix = String.Empty;</span></span><br><span class=\"line\">        <span class=\"comment\">//设置默认模型展开深度。默认值为3，可以设置成-1以完全展开所有模型。</span></span><br><span class=\"line\">        <span class=\"comment\">//options.DefaultModelExpandDepth(-1);</span></span><br><span class=\"line\">        <span class=\"comment\">// 启用深链接功能后，用户可以直接通过URL访问特定的API操作或模型，而不需要手动导航到相应的位置。</span></span><br><span class=\"line\">        options.EnableDeepLinking();</span><br><span class=\"line\">        options.DocExpansion(DocExpansion.None); <span class=\"comment\">//swagger文档展开方式，none为折叠，list为列表</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态API\"><a href=\"#动态API\" class=\"headerlink\" title=\"动态API\"></a>动态API</h2><p>Swagger文档的原理是扫描控制器来生成，动态API则是自定义类控制器，然后让接口继承，自定义控制器识别规则，实现思路：</p>\n<ol>\n<li>定义一个接口或特性用来标识这是个控制器，Mvc中实现的核心是ControllerFeatureProvider类，重写IsController的判断逻辑。</li>\n<li>继承IApplicationModelConvention重写Apply，如果是继承了自定义的控制器接口就根据规则标记Http请求类型。比如Abp中继承了IApplicationService接口，Swagger会自动识别,且遵循约定大于规范原则，将Get开头的请求都默认是Get请求，Del开头的请求默认是Delete请求。</li>\n<li>配置应用程序部分管理器，添加自定义的控制器特性提供程序</li>\n<li>配置MvcOptions，添加自定义的应用程序模型约定</li>\n</ol>\n<p>模仿Abp的实现</p>\n<h3 id=\"创建IApplicationService用来标识自定义控制器的接口或特性\"><a href=\"#创建IApplicationService用来标识自定义控制器的接口或特性\" class=\"headerlink\" title=\"创建IApplicationService用来标识自定义控制器的接口或特性\"></a>创建IApplicationService用来标识自定义控制器的接口或特性</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 动态WebAPI接口</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">IApplicationService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"> <span class=\"comment\"><span class=\"doctag\">///</span> 动态WebAPI特性</span></span><br><span class=\"line\"> <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"> [<span class=\"meta\">AttributeUsage(AttributeTargets.Class, Inherited = true)</span>]</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DynamicWebApiAttribute</span> : <span class=\"title\">Attribute</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建ApplicationServiceControllerFeatureProvider类来继承ControllerFeatureProvider类</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 自定义控制器特性提供程序，用于将实现了 IApplicationService 接口的类识别为控制器。</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ApplicationServiceControllerFeatureProvider</span> : <span class=\"title\">ControllerFeatureProvider</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 判断给定的类型是否为控制器。</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;typeInfo&quot;&gt;</span>要判断的类型信息。<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>如果类型是控制器，则返回 true；否则返回 false。<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsController</span>(<span class=\"params\">TypeInfo typeInfo</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查类型是否实现了 IApplicationService 接口</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IApplicationService).IsAssignableFrom(typeInfo))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 检查类型是否满足以下条件：</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> type = typeInfo.AsType();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((<span class=\"keyword\">typeof</span>(IApplicationService).IsAssignableFrom(type) || <span class=\"comment\">//判断是否继承ICoreDynamicController接口</span></span><br><span class=\"line\">                type.IsDefined(<span class=\"keyword\">typeof</span>(DynamicWebApiAttribute), <span class=\"literal\">true</span>) ||<span class=\"comment\">// 判断是否标记了DynamicAPIAttribute特性</span></span><br><span class=\"line\">                 type.BaseType == <span class=\"keyword\">typeof</span>(Controller)) &amp;&amp;</span><br><span class=\"line\">                typeInfo.IsPublic &amp;&amp; !typeInfo.IsAbstract &amp;&amp; !typeInfo.IsGenericType &amp;&amp; !typeInfo.IsInterface)<span class=\"comment\">//必须是Public、不能是抽象类、必须是非泛型的</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不满足上述条件，则返回 false</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建HttpMethodConfigure配置类\"><a href=\"#创建HttpMethodConfigure配置类\" class=\"headerlink\" title=\"创建HttpMethodConfigure配置类\"></a>创建HttpMethodConfigure配置类</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HttpMethodConfigure</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> MethodKey &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> List&lt;<span class=\"built_in\">string</span>&gt; MethodVal &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建ApplicationServiceConvention继承IApplicationModelConvention\"><a href=\"#创建ApplicationServiceConvention继承IApplicationModelConvention\" class=\"headerlink\" title=\"创建ApplicationServiceConvention继承IApplicationModelConvention\"></a>创建ApplicationServiceConvention继承IApplicationModelConvention</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 自定义应用程序模型约定，用于配置实现了 IApplicationService 接口的控制器。</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ApplicationServiceConvention</span> : <span class=\"title\">IApplicationModelConvention</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IConfiguration _configuration;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HttpMethodConfigure&gt; httpMethods = <span class=\"keyword\">new</span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApplicationServiceConvention</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _configuration = configuration;</span><br><span class=\"line\">        httpMethods = _configuration.GetSection(<span class=\"string\">&quot;HttpMethodInfo&quot;</span>).Get&lt;List&lt;HttpMethodConfigure&gt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 应用约定</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;application&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Apply</span>(<span class=\"params\">ApplicationModel application</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//循环每一个控制器信息</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> controller <span class=\"keyword\">in</span> application.Controllers)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> controllerType = controller.ControllerType.AsType();</span><br><span class=\"line\">            <span class=\"comment\">//是否继承IApplicationService接口</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(IApplicationService).IsAssignableFrom(controllerType))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//Actions就是接口的方法</span></span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> controller.Actions)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ConfigureSelector(controller.ControllerName, item);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 配置选择器</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;controllerName&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;action&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureSelector</span>(<span class=\"params\"><span class=\"built_in\">string</span> controllerName, ActionModel action</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果属性路由模型为空，则移除</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; action.Selectors.Count; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (action.Selectors[i].AttributeRouteModel <span class=\"keyword\">is</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                action.Selectors.Remove(action.Selectors[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            <span class=\"comment\">//去除路径中的AppService后缀</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (controllerName.EndsWith(<span class=\"string\">&quot;AppService&quot;</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                controllerName = controllerName.Substring(<span class=\"number\">0</span>, controllerName.Length - <span class=\"number\">10</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果有选择器，则遍历选择器，添加默认路由</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (action.Selectors.Any())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> action.Selectors)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> routePath = <span class=\"built_in\">string</span>.Concat(<span class=\"string\">&quot;api/&quot;</span>, controllerName + <span class=\"string\">&quot;/&quot;</span>, action.ActionName).Replace(<span class=\"string\">&quot;//&quot;</span>, <span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> routeModel = <span class=\"keyword\">new</span> AttributeRouteModel(<span class=\"keyword\">new</span> RouteAttribute(routePath));</span><br><span class=\"line\">                <span class=\"comment\">//如果没有设置路由，则添加路由</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item.AttributeRouteModel == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    item.AttributeRouteModel = routeModel;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果没有选择器，则创建一个选择器并添加。</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            action.Selectors.Add(CreateActionSelector(controllerName, action));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 创建Action选择器</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;controllerName&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;action&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> SelectorModel <span class=\"title\">CreateActionSelector</span>(<span class=\"params\"><span class=\"built_in\">string</span> controllerName, ActionModel action</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> selectorModel = <span class=\"keyword\">new</span> SelectorModel();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> actionName = action.ActionName;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> httpMethod = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">        <span class=\"comment\">//是否有HttpMethodAttribute</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> routeAttributes = action.ActionMethod.GetCustomAttributes(<span class=\"keyword\">typeof</span>(HttpMethodAttribute), <span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">//如果标记了HttpMethodAttribute</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (routeAttributes != <span class=\"literal\">null</span> &amp;&amp; routeAttributes.Any())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            httpMethod = routeAttributes.SelectMany(m =&gt; (m <span class=\"keyword\">as</span> HttpMethodAttribute).HttpMethods).ToList().Distinct().FirstOrDefault();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//大写方法名</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> methodName = action.ActionMethod.Name.ToUpper();</span><br><span class=\"line\">            <span class=\"comment\">//遍历HttpMethodInfo配置，匹配方法名</span></span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> httpMethods)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> method <span class=\"keyword\">in</span> item.MethodVal)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (methodName.StartsWith(method))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        httpMethod = item.MethodKey;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果没有找到对应的HttpMethod，默认使用POST</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (httpMethod == <span class=\"built_in\">string</span>.Empty)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                httpMethod = <span class=\"string\">&quot;POST&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ConfigureSelectorModel(selectorModel, action, controllerName, httpMethod);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 配置选择器模型</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;selectorModel&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;action&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;controllerName&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;httpMethod&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SelectorModel <span class=\"title\">ConfigureSelectorModel</span>(<span class=\"params\">SelectorModel selectorModel, ActionModel action, <span class=\"built_in\">string</span> controllerName, <span class=\"built_in\">string</span> httpMethod</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> routePath = <span class=\"built_in\">string</span>.Concat(<span class=\"string\">&quot;api/&quot;</span>, controllerName + <span class=\"string\">&quot;/&quot;</span>, action.ActionName).Replace(<span class=\"string\">&quot;//&quot;</span>, <span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//给此选择器添加路由</span></span><br><span class=\"line\">        selectorModel.AttributeRouteModel = <span class=\"keyword\">new</span> AttributeRouteModel(<span class=\"keyword\">new</span> RouteAttribute(routePath));</span><br><span class=\"line\">        <span class=\"comment\">//添加HttpMethod</span></span><br><span class=\"line\">        selectorModel.ActionConstraints.Add(<span class=\"keyword\">new</span> HttpMethodActionConstraint(<span class=\"keyword\">new</span>[] &#123; httpMethod &#125;));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> selectorModel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建DynamicWebApiExtensions\"><a href=\"#创建DynamicWebApiExtensions\" class=\"headerlink\" title=\"创建DynamicWebApiExtensions\"></a>创建DynamicWebApiExtensions</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 动态WebAPI扩展类，用于在ASP.NET Core应用程序中添加动态WebAPI功能。</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">DynamicWebApiExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 为IMvcBuilder添加动态WebAPI功能。</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;builder&quot;&gt;</span>IMvcBuilder实例。<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>IMvcBuilder实例。<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IMvcBuilder <span class=\"title\">AddDynamicWebApi</span>(<span class=\"params\"><span class=\"keyword\">this</span> IMvcBuilder builder, IConfiguration configuration</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (builder == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(builder));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 配置应用程序部分管理器，添加自定义的控制器特性提供程序</span></span><br><span class=\"line\">        builder.ConfigureApplicationPartManager(applicationPartManager =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            applicationPartManager.FeatureProviders.Add(<span class=\"keyword\">new</span> ApplicationServiceControllerFeatureProvider());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 配置MvcOptions，添加自定义的应用程序模型约定</span></span><br><span class=\"line\">        builder.Services.Configure&lt;MvcOptions&gt;(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.Conventions.Add(<span class=\"keyword\">new</span> ApplicationServiceConvention(configuration));</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 为IMvcCoreBuilder添加动态WebAPI功能。</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;builder&quot;&gt;</span>IMvcCoreBuilder实例。<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>IMvcCoreBuilder实例。<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IMvcCoreBuilder <span class=\"title\">AddDynamicWebApi</span>(<span class=\"params\"><span class=\"keyword\">this</span> IMvcCoreBuilder builder, IConfiguration configuration</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (builder == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(builder));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 配置应用程序部分管理器，添加自定义的控制器特性提供程序</span></span><br><span class=\"line\">        builder.ConfigureApplicationPartManager(applicationPartManager =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            applicationPartManager.FeatureProviders.Add(<span class=\"keyword\">new</span> ApplicationServiceControllerFeatureProvider());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 配置MvcOptions，添加自定义的应用程序模型约定</span></span><br><span class=\"line\">        builder.Services.Configure&lt;MvcOptions&gt;(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            options.Conventions.Add(<span class=\"keyword\">new</span> ApplicationServiceConvention(configuration));</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Program中配置\"><a href=\"#Program中配置\" class=\"headerlink\" title=\"Program中配置\"></a>Program中配置</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注册动态API服务</span></span><br><span class=\"line\">builder.Services.AddControllers().AddDynamicWebApi(builder.Configuration);</span><br><span class=\"line\"><span class=\"comment\">//必须要加，不然断点进不来</span></span><br><span class=\"line\">app.MapControllers();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在Appsettings配置http请求类型匹配规则\"><a href=\"#在Appsettings配置http请求类型匹配规则\" class=\"headerlink\" title=\"在Appsettings配置http请求类型匹配规则\"></a>在Appsettings配置http请求类型匹配规则</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;HttpMethodInfo&quot;</span>: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;MethodKey&quot;</span>: <span class=\"string\">&quot;Get&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;MethodVal&quot;</span>: [ <span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;QUERY&quot;</span> ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;MethodKey&quot;</span>: <span class=\"string\">&quot;Post&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;MethodVal&quot;</span>: [ <span class=\"string\">&quot;CREATE&quot;</span>, <span class=\"string\">&quot;SAVE&quot;</span>, <span class=\"string\">&quot;INSERT&quot;</span>, <span class=\"string\">&quot;ADD&quot;</span> ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;MethodKey&quot;</span>: <span class=\"string\">&quot;Put&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;MethodVal&quot;</span>: [ <span class=\"string\">&quot;UPDATE&quot;</span>, <span class=\"string\">&quot;EDIT&quot;</span> ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;MethodKey&quot;</span>: <span class=\"string\">&quot;Delete&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;MethodVal&quot;</span>: [ <span class=\"string\">&quot;Delete&quot;</span>, <span class=\"string\">&quot;REMOVE&quot;</span> ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建测试类\"><a href=\"#创建测试类\" class=\"headerlink\" title=\"创建测试类\"></a>创建测试类</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Test</span> : <span class=\"title\">IApplicationService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span>领域层注释测试接口</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Hello</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello from Class1&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Get</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Get from Class1&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i-blog.csdnimg.cn/direct/7a406a66b5a0474095e1a7fc40d1ce14.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"将动态API配置Swagger文档注释\"><a href=\"#将动态API配置Swagger文档注释\" class=\"headerlink\" title=\"将动态API配置Swagger文档注释\"></a>将动态API配置Swagger文档注释</h2><ol>\n<li>类库配置中设置xml文件生成地址</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;GenerateDocumentationFile&gt;True&lt;/GenerateDocumentationFile&gt;</span><br><span class=\"line\">&lt;DocumentationFile&gt;bin\\Debug\\FlyFramework.Core.xml&lt;/DocumentationFile&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在Host中的wwwroot创建ApiDocs文件夹</li>\n<li>Host主机配置xml文件复制地址，生成的xml文件会复制到对应的地址。</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ApiDocDir&gt;wwwroot\\ApiDocs&lt;/ApiDocDir&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--在构建项目后，复制所有以FlyFramework开头的XML文档文件到指定的API文档目录。这通常用于将生成的XML文档文件（例如API注释）整理到一个目录中，便于进一步的处理或发布。这种做法可以适合于生成API文档如Swagger时的使用场景。--&gt;</span><br><span class=\"line\">&lt;Target Name=<span class=\"string\">&quot;CopyXmlDocFileForBuild&quot;</span> AfterTargets=<span class=\"string\">&quot;Build&quot;</span>&gt;</span><br><span class=\"line\">\t&lt;ItemGroup&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;!--Include=<span class=\"string\">&quot;@(ReferencePath-&gt;&#x27;%(RootDir)%(Directory)%(Filename).xml&#x27;)&quot;</span>：这行表示从所有项目引用（ReferencePath）的路径中收集以.xml为扩展名的文件。这些文件通常是生成的XML文档文件。--&gt;</span><br><span class=\"line\">\t\t&lt;!--Condition=<span class=\"string\">&quot;$([System.String]::new(&#x27;%(FileName)&#x27;).StartsWith(&#x27;FlyFramework&#x27;))&quot;</span>：此条件用于过滤文件，仅包括文件名以FlyFramework开头的XML文档文件。这保证只有相关的文档文件被选择。--&gt;</span><br><span class=\"line\">\t\t&lt;XmlDocFiles Include=<span class=\"string\">&quot;@(ReferencePath-&gt;&#x27;%(RootDir)%(Directory)%(Filename).xml&#x27;)&quot;</span> Condition=<span class=\"string\">&quot;$([System.String]::new(&#x27;%(FileName)&#x27;).StartsWith(&#x27;FlyFramework&#x27;))&quot;</span> /&gt;</span><br><span class=\"line\">\t&lt;/ItemGroup&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!--SourceFiles=<span class=\"string\">&quot;@(XmlDocFiles)&quot;</span>：指定要复制的源文件为上一步中定义的XmlDocFiles集合。--&gt;</span><br><span class=\"line\">\t&lt;!--`Condition=<span class=\"string\">&quot;Exists(&#x27;%(FullPath)&#x27;)&quot;</span>：确保复制前源文件存在，这是一种安全检查。--&gt;</span><br><span class=\"line\">\t&lt;!--DestinationFolder=<span class=\"string\">&quot;$(ApiDocDir)&quot;</span>：目的地文件夹为$(ApiDocDir)，这个属性之前已经在项目文件中定义，指向存放API文档的目录。--&gt;</span><br><span class=\"line\">\t&lt;!--SkipUnchangedFiles=<span class=\"string\">&quot;true&quot;</span>：此选项表示只有发生变化的文件会被复制，这可以提高效率，避免不必要的复制操作。--&gt;</span><br><span class=\"line\">\t&lt;Copy SourceFiles=<span class=\"string\">&quot;@(XmlDocFiles)&quot;</span> Condition=<span class=\"string\">&quot;Exists(&#x27;%(FullPath)&#x27;)&quot;</span> DestinationFolder=<span class=\"string\">&quot;$(ApiDocDir)&quot;</span> SkipUnchangedFiles=<span class=\"string\">&quot;true&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/Target&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>在AddSwaggerGen增加配置</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//遍历所有xml并加载</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> binXmlFiles =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> DirectoryInfo(Path.Join(builder.Environment.WebRootPath, <span class=\"string\">&quot;ApiDocs&quot;</span>))</span><br><span class=\"line\">        .GetFiles(<span class=\"string\">&quot;*.xml&quot;</span>, SearchOption.TopDirectoryOnly);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> filePath <span class=\"keyword\">in</span> binXmlFiles.Select(item =&gt; item.FullName))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    options.IncludeXmlComments(filePath, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h2><p>思路参考的大佬文章，大佬是从源码角度解释，我写这篇偏新手向，做了些拓展，原文指路：<a href=\"https://www.cnblogs.com/zhangnever/p/17131504.html\">.Net Core后端架构实战【2-实现动态路由与Dynamic API】 - 江北、 - 博客园 (cnblogs.com)</a></p>\n","feature":false,"text":"在日常开发时，想要用到Swagger就必须得创建控制器创建接口文档，一般业务处理都不会在控制器中处理，我们一般会再创建另一个类来处理业务逻辑，每次创建都两个类就...","permalink":"/post/动态API集成源码解析版","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":".Net","slug":"Net","count":4,"path":"api/categories/Net.json"}],"tags":[{"name":"Swagger","slug":"Swagger","count":2,"path":"api/tags/Swagger.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9B%86%E6%88%90Swagger\"><span class=\"toc-text\">集成Swagger</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81API\"><span class=\"toc-text\">动态API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAIApplicationService%E7%94%A8%E6%9D%A5%E6%A0%87%E8%AF%86%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%88%96%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">创建IApplicationService用来标识自定义控制器的接口或特性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAHttpMethodConfigure%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">创建HttpMethodConfigure配置类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAApplicationServiceConvention%E7%BB%A7%E6%89%BFIApplicationModelConvention\"><span class=\"toc-text\">创建ApplicationServiceConvention继承IApplicationModelConvention</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BADynamicWebApiExtensions\"><span class=\"toc-text\">创建DynamicWebApiExtensions</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Program%E4%B8%AD%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Program中配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8Appsettings%E9%85%8D%E7%BD%AEhttp%E8%AF%B7%E6%B1%82%E7%B1%BB%E5%9E%8B%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">在Appsettings配置http请求类型匹配规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E6%B5%8B%E8%AF%95%E7%B1%BB\"><span class=\"toc-text\">创建测试类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%86%E5%8A%A8%E6%80%81API%E9%85%8D%E7%BD%AESwagger%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">将动态API配置Swagger文档注释</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%B4%E8%B0%A2\"><span class=\"toc-text\">致谢</span></a></li></ol>","author":{"name":"FaceMan","slug":"blog-author","avatar":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241114/image.2vermeukr5.webp","link":"/","description":"从0开始，直到1。","socials":{"github":"https://github.com/faceman0814","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/manmanzainuli","juejin":"","customs":{"bokeyuan":{"icon":"/svg/bokeyuan.svg","link":"https://www.cnblogs.com/FaceMan"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"使用Hugo搭建个人博客","uid":"e39417a60f2c78600e5ff58d1d0519aa","slug":"使用Hugo搭建个人博客","date":"2024-11-26T00:00:00.000Z","updated":"2024-12-24T01:56:35.265Z","comments":true,"path":"api/articles/使用Hugo搭建个人博客.json","keywords":null,"cover":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241114/hugo.1ovgdt2n7y.webp","text":"先来说说写这篇博客的缘由 一个程序员最好的门面是啥？除了github拥有star数高的开源项目之外当然是个人博客，无论是技术积累还是找工作，有一个属于自己的个人...","permalink":"/post/使用Hugo搭建个人博客","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"DevOps","slug":"DevOps","count":11,"path":"api/categories/DevOps.json"}],"tags":[{"name":"Hugo","slug":"Hugo","count":1,"path":"api/tags/Hugo.json"}],"author":{"name":"FaceMan","slug":"blog-author","avatar":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241114/image.2vermeukr5.webp","link":"/","description":"从0开始，直到1。","socials":{"github":"https://github.com/faceman0814","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/manmanzainuli","juejin":"","customs":{"bokeyuan":{"icon":"/svg/bokeyuan.svg","link":"https://www.cnblogs.com/FaceMan"}}}}},"next_post":{"title":".NetCore自动开启事务保证数据一致性","uid":"26f6a1758883b55cdee304c67b5f3a44","slug":"NetCore自动开启事务","date":"2024-11-22T00:00:00.000Z","updated":"2024-12-24T01:56:35.264Z","comments":true,"path":"api/articles/NetCore自动开启事务.json","keywords":null,"cover":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241116/image.32hzl5ngkn.webp","text":"起因是因为公司没有使用任何代码框架，所以使用的都是比较原始的写法，在系统的各处都有SaveChanges()方法,这样会产生一个问题就是，如果出现异常前面已经执...","permalink":"/post/NetCore自动开启事务","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":".Net","slug":"Net","count":4,"path":"api/categories/Net.json"}],"tags":[{"name":".NetCore","slug":"NetCore","count":1,"path":"api/tags/NetCore.json"},{"name":"c#","slug":"c","count":2,"path":"api/tags/c.json"}],"author":{"name":"FaceMan","slug":"blog-author","avatar":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241114/image.2vermeukr5.webp","link":"/","description":"从0开始，直到1。","socials":{"github":"https://github.com/faceman0814","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/manmanzainuli","juejin":"","customs":{"bokeyuan":{"icon":"/svg/bokeyuan.svg","link":"https://www.cnblogs.com/FaceMan"}}}}}}