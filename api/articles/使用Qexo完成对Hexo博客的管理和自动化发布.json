{"title":"Qexo：博客的管理和自动化发布","uid":"6077b98b9ff0688a2006567048ac9630","slug":"使用Qexo完成对Hexo博客的管理和自动化发布","date":"2024-11-28T00:00:00.000Z","updated":"2024-12-24T01:56:35.265Z","comments":true,"path":"api/articles/使用Qexo完成对Hexo博客的管理和自动化发布.json","keywords":null,"cover":"https://unpkg.com/qexo-static@2.4.0/qexo/images/qexo.png","content":"<p>Hexo是一个模板很多的静态博客生成工具，但是每次都需要打开编译器进行博客撰写和使用命令行生成发布未免有点太繁琐，本篇文章就来总结大佬的可视化博客撰写内容和自动化部署博客方法。</p>\n<h1 id=\"Qexo\"><a href=\"#Qexo\" class=\"headerlink\" title=\"Qexo\"></a>Qexo</h1><p>在逛Github时看到这个项目我的眼睛一亮，可以管理hexo的博客内容，亲测好用，这里不展开讲，因为官方文档足够详细，如果过程中遇到问题先查看issue，一般都能解决：<a href=\"https://www.oplog.cn/qexo/\">Qexo | 一个美观、强大的在线 静态博客 管理器</a></p>\n<h1 id=\"自动化部署博客\"><a href=\"#自动化部署博客\" class=\"headerlink\" title=\"自动化部署博客\"></a>自动化部署博客</h1><p>为了简化Hexo部署过程，你可以使用持续集成工具（如 GitHub Actions）来实现自动化部署。</p>\n<h2 id=\"1、创建博客源代码仓库\"><a href=\"#1、创建博客源代码仓库\" class=\"headerlink\" title=\"1、创建博客源代码仓库\"></a>1、创建博客源代码仓库</h2><p>因为我们需要 Hexo 源代码才能生成静态文件，所以我们需要建立一个私有仓库来保存我们的源代码，当然如果你觉得麻烦也可以建立一个分支保存，不过通常我们会将纯静态文件和源码文件分别存放到两个仓库里，一个可以作为公开仓库对外展示，源码目录需要设为私有，有利于更好地保护你的文章版权。</p>\n<h2 id=\"2、生成-Github-Token\"><a href=\"#2、生成-Github-Token\" class=\"headerlink\" title=\"2、生成 Github Token\"></a>2、生成 Github Token</h2><p>点击头像 &#x3D;&gt; <a href=\"https://github.com/settings\">Settings</a> &#x3D;&gt; Developer settings &#x3D;&gt;Personal access tokens &#x3D;&gt; Tokens(classic) &#x3D;&gt; Generate new token &#x3D;&gt; Generate new token(classic)</p>\n<p><img src=\"https://github.com/faceman0814/picx-images-hosting/raw/master/Qexo/24/11/image_2b15d0d9e38d53060a5effa142dc21ee.png\"></p>\n<p>设置根据需要设置过期时间，我这里设置永不过期，权限勾选repo以及 workflow，生成后记得保存起来，只显示一次。</p>\n<h1 id=\"3、修改-config-yml\"><a href=\"#3、修改-config-yml\" class=\"headerlink\" title=\"3、修改 config.yml\"></a>3、修改 config.yml</h1><p>把 config.yml 文件中的 deploy &#x3D;&gt; repository &#x3D;&gt; github 值改成 token url 的形式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  - type: git</span><br><span class=\"line\">    repo: https://&#123;$GH_TOKEN&#125;@github.com/shiguang-coding/shiguang-coding.github.io.git,main</span><br><span class=\"line\"></span><br><span class=\"line\">deploy:</span><br><span class=\"line\"></span><br><span class=\"line\">- type: git</span><br><span class=\"line\">  repo: https://&#123;$GH_TOKEN&#125;@github.com/shiguang-coding/shiguang-coding.github.io.git,main</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>将 {$GH_TOKEN} 替换成刚才生成的 token ，仓库地址是博客静态文件最终存放的仓库地址，即开通 Github Pages 服务的那个仓库地址。</p>\n<p>这里可以同时部署到多个仓库，只需复制一份配置信息即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  - type: git</span><br><span class=\"line\">    repo: https://&#123;$GH_TOKEN&#125;@github.com/your-name/your-name.github.io.git,main</span><br><span class=\"line\">  - type: git</span><br><span class=\"line\">    repo: https://&#123;$GH_TOKEN&#125;@github.com/your-name/your-repo.git,main</span><br><span class=\"line\">deploy:</span><br><span class=\"line\"></span><br><span class=\"line\">- type: git</span><br><span class=\"line\">  repo: https://&#123;$GH_TOKEN&#125;@github.com/your-name/your-name.github.io.git,main</span><br><span class=\"line\">- type: git</span><br><span class=\"line\">  repo: https://&#123;$GH_TOKEN&#125;@github.com/your-name/your-repo.git,main</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、创建-GitHub-Actions-脚本\"><a href=\"#4、创建-GitHub-Actions-脚本\" class=\"headerlink\" title=\"4、创建 GitHub Actions 脚本\"></a>4、创建 GitHub Actions 脚本</h2><p>GitHub Actions 的工作流文件存放在源代码仓库的 .github&#x2F;workflows 目录。workflow 文件采用 YAML 格式，文件名可以任意取，但是后缀名统一为 .yml，比如 deploy.yml。一个库可以有多个 workflow 文件。GitHub 在我们完成预设触发条件时，只要发现 .github&#x2F;workflows 目录里面有 .yml 文件，就会自动读取运行该文件。</p>\n<p>可以手动建立此文件，或者通过源代码仓库 &#x3D;&gt; Actions &#x3D;&gt; 选择 Setup Node创建，但最终同样都需 push 到远端源代码仓库中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: FaceMan&#x27;s Blog CI/CD # 脚本 workflow 名称</span><br><span class=\"line\"></span><br><span class=\"line\">on:</span><br><span class=\"line\">  push:</span><br><span class=\"line\">    branches: [main, master] # 当监测 main,master 的 push</span><br><span class=\"line\">    paths: # 监测所有 source 目录下的文件变动，所有 yml,json 后缀文件的变动。</span><br><span class=\"line\">      - &#x27;*.json&#x27;</span><br><span class=\"line\">      - &#x27;**.yml&#x27;</span><br><span class=\"line\">      - &#x27;**/source/**&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  blog: # 任务名称</span><br><span class=\"line\">    timeout-minutes: 30 # 设置 30 分钟超时</span><br><span class=\"line\">    runs-on: ubuntu-latest # 指定最新 ubuntu 系统</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - uses: actions/checkout@v2 # 拉取仓库代码</span><br><span class=\"line\">      - uses: actions/setup-node@v2 # 设置 node.js 环境</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          node-version: &#x27;18&#x27;  # 根据你的 Node.js 版本进行调整</span><br><span class=\"line\">      - name: Cache node_modules # 缓存 node_modules，提高编译速度，毕竟每月只有 2000 分钟。</span><br><span class=\"line\">        uses: actions/cache@v2</span><br><span class=\"line\">        env:</span><br><span class=\"line\">          cache-name: cache-node-modules</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          path: ~/.npm</span><br><span class=\"line\">          key: $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class=\"line\">          restore-keys: |</span><br><span class=\"line\">            $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-</span><br><span class=\"line\">            $&#123;&#123; runner.os &#125;&#125;-build-</span><br><span class=\"line\">            $&#123;&#123; runner.os &#125;&#125;-</span><br><span class=\"line\">      - name: Init Node.js # 安装源代码所需插件</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">          npm install</span><br><span class=\"line\">          echo &quot;init node successful&quot;</span><br><span class=\"line\">      - name: Install Hexo-cli # 安装 Hexo</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">          npm install -g hexo-cli --save</span><br><span class=\"line\">          echo &quot;install hexo successful&quot;</span><br><span class=\"line\">      - name: Build Blog # 编译创建静态博客文件</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">          hexo clean</span><br><span class=\"line\">          hexo g</span><br><span class=\"line\">          # echo &quot;自定义域名&quot; &gt; public/CNAME</span><br><span class=\"line\">          echo &quot;build blog successful&quot;</span><br><span class=\"line\">      - name: FaceMan&#x27;s Blog # 设置 git 信息并推送静态博客文件</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">          git config --global user.name &quot;your name&quot;</span><br><span class=\"line\">          git config --global user.email &quot;your email&quot;</span><br><span class=\"line\">          hexo deploy</span><br><span class=\"line\"></span><br><span class=\"line\">      - run: echo &quot;Deploy Successful!&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果需要加自定义域名，就把脚本中自定义域名替换为你的域名，并且删除#。</p>\n<p>代码提交前需要检查下是否已安装一键部署插件 hexo-deployer-git。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>若提示 Deployer not found: git 则说明尚未引入该插件依赖。</p>\n<p>代码提交后会自动执行 Actions，可查看部署记录及日志，部署失败也会有邮件提醒。</p>\n<p><img src=\"https://github.com/faceman0814/picx-images-hosting/raw/master/Qexo/24/11/image_b376584f6d3356ce29ca958e4fe254b5.png\"></p>\n","feature":false,"text":"Hexo是一个模板很多的静态博客生成工具，但是每次都需要打开编译器进行博客撰写和使用命令行生成发布未免有点太繁琐，本篇文章就来总结大佬的可视化博客撰写内容和自动...","permalink":"/post/使用Qexo完成对Hexo博客的管理和自动化发布","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Hexo","slug":"Hexo","count":1,"path":"api/tags/Hexo.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Qexo\"><span class=\"toc-text\">Qexo</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2\"><span class=\"toc-text\">自动化部署博客</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%BA%90%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">1、创建博客源代码仓库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%94%9F%E6%88%90-Github-Token\"><span class=\"toc-text\">2、生成 Github Token</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E3%80%81%E4%BF%AE%E6%94%B9-config-yml\"><span class=\"toc-text\">3、修改 config.yml</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%88%9B%E5%BB%BA-GitHub-Actions-%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">4、创建 GitHub Actions 脚本</span></a></li></ol></li></ol>","author":{"name":"FaceMan","slug":"blog-author","avatar":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241114/image.2vermeukr5.webp","link":"/","description":"从0开始，直到1。","socials":{"github":"https://github.com/faceman0814","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/manmanzainuli","juejin":"","customs":{"bokeyuan":{"icon":"/svg/bokeyuan.svg","link":"https://www.cnblogs.com/FaceMan"}}}},"mapped":true,"hidden":false,"prev_post":{"title":" Docker拉取netsdk镜像","uid":"effef2644cf5d4dbdf4ef3a751e9c7bc","slug":"docker拉取netsdk镜像","date":"2024-11-29T00:00:00.000Z","updated":"2024-12-24T01:56:35.265Z","comments":true,"path":"api/articles/docker拉取netsdk镜像.json","keywords":null,"cover":"https://github.com/faceman0814/picx-images-hosting/raw/master/Qexo/24/11/image_519a183df02cb543cc73a046fcdd76e9.png","text":"在写DockerFile文件时，发现直接拉取mcr.microsoft.com/dotnet/sdk:9.0报错： 123PS D:\\Study\\Demos\\D...","permalink":"/post/docker拉取netsdk镜像","photos":[],"count_time":{"symbolsCount":470,"symbolsTime":"1 mins."},"categories":[{"name":"DevOps","slug":"DevOps","count":11,"path":"api/categories/DevOps.json"}],"tags":[{"name":"Docker","slug":"Docker","count":6,"path":"api/tags/Docker.json"},{"name":".Net SDK","slug":"Net-SDK","count":1,"path":"api/tags/Net-SDK.json"}],"author":{"name":"FaceMan","slug":"blog-author","avatar":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241114/image.2vermeukr5.webp","link":"/","description":"从0开始，直到1。","socials":{"github":"https://github.com/faceman0814","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/manmanzainuli","juejin":"","customs":{"bokeyuan":{"icon":"/svg/bokeyuan.svg","link":"https://www.cnblogs.com/FaceMan"}}}},"feature":false},"next_post":{"title":"运维常用命令","uid":"2fad6525e464e362f1913614556fcda3","slug":"运维常用命令","date":"2024-11-28T00:00:00.000Z","updated":"2024-12-24T01:56:35.266Z","comments":true,"path":"api/articles/运维常用命令.json","keywords":null,"cover":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241115/image.lvr4sxckh.webp","text":"在操作项目部署的时候，经常会忘记一些命令，从而百度或者gpt，这里记录一些常用的命令操作。...","permalink":"/post/运维常用命令","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"DevOps","slug":"DevOps","count":11,"path":"api/categories/DevOps.json"}],"tags":[{"name":"Docker","slug":"Docker","count":6,"path":"api/tags/Docker.json"},{"name":"Linux","slug":"Linux","count":3,"path":"api/tags/Linux.json"}],"author":{"name":"FaceMan","slug":"blog-author","avatar":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241114/image.2vermeukr5.webp","link":"/","description":"从0开始，直到1。","socials":{"github":"https://github.com/faceman0814","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/manmanzainuli","juejin":"","customs":{"bokeyuan":{"icon":"/svg/bokeyuan.svg","link":"https://www.cnblogs.com/FaceMan"}}}}}}