{"title":".NetCore自动开启事务保证数据一致性","uid":"26f6a1758883b55cdee304c67b5f3a44","slug":"NetCore自动开启事务","date":"2024-11-22T00:00:00.000Z","updated":"2024-12-24T01:56:35.264Z","comments":true,"path":"api/articles/NetCore自动开启事务.json","keywords":null,"cover":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241116/image.32hzl5ngkn.webp","content":"<p>起因是因为公司没有使用任何代码框架，所以使用的都是比较原始的写法，在系统的各处都有SaveChanges()方法,这样会产生一个问题就是，如果出现异常前面已经执行了一些操作直接到数据库去了，但应该回滚到之前的状态，所以我们需要手动开启事务，并在方法执行完毕后提交事务。但是如果每个方法都手动开启事务，代码会显得很冗余，所以我们需要一个自动开启事务的机制。</p>\n<h1 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h1><h2 id=\"同步方法\"><a href=\"#同步方法\" class=\"headerlink\" title=\"同步方法\"></a>同步方法</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TransactionFilterAttritube</span> : <span class=\"title\">IActionFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> YourDbContext  _dbContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TransactionFilterAttritube</span>(<span class=\"params\">YourDbContext  dbContext</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _dbContext = dbContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuted</span>(<span class=\"params\">ActionExecutedContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查是否有异常发生</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (context.Exception == <span class=\"literal\">null</span> &amp;&amp; !context.Canceled)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 提交事务</span></span><br><span class=\"line\">            _dbContext.SaveChanges();</span><br><span class=\"line\">            _dbContext.Database.CurrentTransaction?.Commit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 回滚事务</span></span><br><span class=\"line\">            _dbContext.Database.CurrentTransaction?.Rollback();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在动作方法执行之前启动事务</span></span><br><span class=\"line\">        _dbContext.Database.BeginTransaction();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异步方法\"><a href=\"#异步方法\" class=\"headerlink\" title=\"异步方法\"></a>异步方法</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TransactionFilterAttritube</span> : <span class=\"title\">IAsyncActionFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> YourDbContext  _dbContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TransactionFilterAttritube</span>(<span class=\"params\">YourDbContext  dbContext</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _dbContext = dbContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnActionExecutionAsync</span>(<span class=\"params\">ActionExecutingContext context, ActionExecutionDelegate next</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在动作方法执行之前启动事务</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> transaction = <span class=\"keyword\">await</span> _dbContext.Database.BeginTransactionAsync();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> executedContext = <span class=\"keyword\">await</span> next(); <span class=\"comment\">// 执行Action</span></span><br><span class=\"line\">        <span class=\"comment\">// 检查是否有异常发生</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executedContext.Exception == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 提交事务</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> _dbContext.SaveChangesAsync();</span><br><span class=\"line\">            <span class=\"keyword\">await</span> transaction.CommitAsync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 回滚事务</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> transaction.RollbackAsync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><p>启动时注册拦截器：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services.AddMvcCore(option =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    option.Filters.Add&lt;TransactionFilterAttritube&gt;();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>通过拦截器的方式，我们可以自动开启事务，并在方法执行完毕后提交事务，避免手动开启事务，提高代码的可读性和可维护性。</p>\n","text":"起因是因为公司没有使用任何代码框架，所以使用的都是比较原始的写法，在系统的各处都有SaveChanges()方法,这样会产生一个问题就是，如果出现异常前面已经执...","permalink":"/post/NetCore自动开启事务","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":".Net","slug":"Net","count":4,"path":"api/categories/Net.json"}],"tags":[{"name":".NetCore","slug":"NetCore","count":1,"path":"api/tags/NetCore.json"},{"name":"c#","slug":"c","count":2,"path":"api/tags/c.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">实现方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">同步方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">异步方法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">使用方法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"FaceMan","slug":"blog-author","avatar":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241114/image.2vermeukr5.webp","link":"/","description":"从0开始，直到1。","socials":{"github":"https://github.com/faceman0814","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/manmanzainuli","juejin":"","customs":{"bokeyuan":{"icon":"/svg/bokeyuan.svg","link":"https://www.cnblogs.com/FaceMan"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"动态API集成源码解析版","uid":"82af2d180e848d28b222db96dd62b1e7","slug":"动态API集成源码解析版","date":"2024-11-24T00:00:00.000Z","updated":"2024-12-24T01:56:35.266Z","comments":true,"path":"api/articles/动态API集成源码解析版.json","keywords":null,"cover":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241114/Swagger.9rjf6latxr.webp","text":"在日常开发时，想要用到Swagger就必须得创建控制器创建接口文档，一般业务处理都不会在控制器中处理，我们一般会再创建另一个类来处理业务逻辑，每次创建都两个类就...","permalink":"/post/动态API集成源码解析版","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":".Net","slug":"Net","count":4,"path":"api/categories/Net.json"}],"tags":[{"name":"Swagger","slug":"Swagger","count":2,"path":"api/tags/Swagger.json"}],"author":{"name":"FaceMan","slug":"blog-author","avatar":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241114/image.2vermeukr5.webp","link":"/","description":"从0开始，直到1。","socials":{"github":"https://github.com/faceman0814","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/manmanzainuli","juejin":"","customs":{"bokeyuan":{"icon":"/svg/bokeyuan.svg","link":"https://www.cnblogs.com/FaceMan"}}}},"feature":false},"next_post":{"title":"Sql优化方法","uid":"1796052fe66afe402255c3eb4319b228","slug":"Sql优化方法","date":"2024-11-21T00:00:00.000Z","updated":"2024-12-24T01:56:35.264Z","comments":true,"path":"api/articles/Sql优化方法.json","keywords":null,"cover":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241120/image.esjgf1zs0.webp","text":"最近新入职了一家电商公司，做CRM系统，由于业务量比较大，数据量庞大动不动几十万数据起步，数据库的压力也很大。比如最近遇到的需求，需要查看最规定时间内客户是否有...","permalink":"/post/Sql优化方法","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"数据库","slug":"数据库","count":1,"path":"api/categories/数据库.json"}],"tags":[{"name":"Sql","slug":"Sql","count":1,"path":"api/tags/Sql.json"}],"author":{"name":"FaceMan","slug":"blog-author","avatar":"https://github.com/faceman0814/picx-images-hosting/raw/master/20241114/image.2vermeukr5.webp","link":"/","description":"从0开始，直到1。","socials":{"github":"https://github.com/faceman0814","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/manmanzainuli","juejin":"","customs":{"bokeyuan":{"icon":"/svg/bokeyuan.svg","link":"https://www.cnblogs.com/FaceMan"}}}},"feature":false}}